#!/usr/bin/env node
"use strict";

const path = require('path');
const pkg = require('../package.json');
const program = require('commander');
const exec = require('child_process').exec;
const async = require('async');
const neutron = require('../scripts/neutron');
const navigation = require('../scripts/navigation');
const copy = require('../scripts/copy');
const server = require('../scripts/server');
const watch = require('../scripts/watch');
const settings = require('../core/libs/settings');
const u = require('../core/libs/utilities');
const fse = require('fs-extra');

const currentDir = u.getPath(process.cwd());

let runningServer = false;
let watching = false;

const run = (options) => {
	async.waterfall([
		callback => {
			neutron(callback);
		},
		callback => {
			navigation(callback);
		},
		callback => {
			copy(callback);
		},
		callback => {
			if (options.server && !runningServer) {
				runningServer = true;
				return server(callback);
			}

			return callback();
		},
		callback => {
			if (options.watch && !watching) {
				watching = true;
				return watch(callback);
			}

			return callback();
		}
	])
}

const install = (options) => {
	let src = u.getPath(settings.paths.src.root);
	let originalSettings = u.getPath('./neutron.json');
	let sourceTarget = u.getPath(currentDir, '/src');
	let settingsTarget = u.getPath(currentDir, '/neutron.json');

	u.log('Install neutron', 'title');

	if (!fse.existsSync(settingsTarget)) {
		u.log('Start copying neutron settings file', 'info');

		fse.copy(originalSettings, settingsTarget, err => {
			if (err) {
				return u.log(err, 'error');
			}

			u.log('Copying neutron settings file', 'success');
		});
	} else {
		u.log('Settings file already exists. Skip settings copy.', 'info');
	}

	if (fse.existsSync(sourceTarget)) {
		u.log('Fail to proceed, settings folder already exists', 'error');
		return;
	}

	if (options.clean) {
		u.log('Start creating a clean version of Neutron', 'info');

		fse.mkdirsSync(u.getAppPath(settings.paths.src.assets));
		fse.mkdirsSync(u.getAppPath(settings.paths.src.data));
		fse.mkdirsSync(u.getAppPath(settings.paths.src.layouts));
		fse.mkdirsSync(u.getAppPath(settings.paths.src.patterns));

		fse.outputFileSync(u.getAppPath(settings.paths.src.data, 'global.json'), '{}');

		fse.copy(u.getPath(settings.paths.src.layouts, '/clean.hbs'), u.getAppPath(settings.paths.src.layouts, settings.defaultLayoutName + '.hbs'), err => {
			if (err) {
				return u.log(err, 'error');
			}
		});

		u.log('A clean version of Neutron has been created', 'success');
	} else {
		u.log('Start copying dummy source files', 'info');

		fse.copy(u.getPath(src), sourceTarget, err => {
			if (err) {
				return u.log(err, 'error');
			}

			u.log('Dummy source files have been copy', 'success');
		});
	}
}

program.version(pkg.version);

program
	.command('run')
	.description('Run neutron')
	.option('-w, --watch', 'Watch files')
	.option('-s, --server', 'Run server')
	.action(run);

program
	.command('install')
	.description('Install neutron')
	.option('-c, --clean', 'Clean installation files')
	.action(install);

program.parse(process.argv);

